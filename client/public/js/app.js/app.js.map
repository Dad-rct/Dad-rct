{"version":3,"file":"app.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/app.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../js/producer/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/app.ts\");\n","\nlet emmet = {\n    top: 0\n}\n\nlet lives = 5\nlet score = 0\nlet level = 1\n\nlet emmetSpeed = 2\nlet emmetTop = 0\nlet studSpeedS = 5;\nlet studFreq = 4;\nlet interval: any = undefined\nlet keyDown: string | undefined = undefined\nlet shiftDown: boolean | undefined = undefined\nlet lastKeyDown = performance.now()\ninterface iStudEntry {\n    left: number,\n    element: HTMLDivElement,\n    last_animate: number\n}\nconst studs: iStudEntry[] = []\n\nconst studFactory = () => {\n    if (interval) clearTimeout(interval);\n    interval = setInterval(() => {\n        newStud()\n    }, studFreq * 1000)\n}\nconst aha = new Audio(\"../sounds/aha.mp3\")\nconst playAha = () => {\n    aha.currentTime = 2.2\n    aha.play();\n}\nconst setScore = () => {\n    console.debug(\"set score to \", new String(score.toString()).padStart(5, \"0\"))\n    const element = document.querySelector(\".score\")\n    if (element) {\n        element.innerHTML = new String(score.toString()).padStart(5, \"0\").toString()\n    }\n}\nconst getMainWindow = () => {\n    const ret = document.querySelector(\"#main\")\n    if (ret === undefined)\n        throw new Error(\"No main window found\")\n    return ret as HTMLDivElement\n}\nconst getEmmet = () => {\n    const ret = document.querySelector(\".emmet\")\n    if (ret === undefined)\n        throw new Error(\"No emmet element found\")\n    return ret as HTMLDivElement\n}\nconst getEmmetNuts = () => {\n    const ret = document.querySelector(\".emmet .nuts\")\n    if (ret === undefined)\n        throw new Error(\"No emmet nuts element found\")\n    return ret as HTMLDivElement\n}\nconst animateframe = (ts: number) => {\n    const mainWindow = getMainWindow()\n    const emmetElement = getEmmet()\n    const emmetNutsElement = getEmmetNuts()\n\n    if (keyDown) {\n        const duration = ts - lastKeyDown\n        const windowSize = mainWindow.clientHeight\n        const pixelsPerMillisecond = windowSize / (emmetSpeed * 1000)\n        let multiplier = 0\n        switch (keyDown) {\n            case \"w\":\n                multiplier = shiftDown ? -2 : -1\n                break;\n            case \"s\":\n                multiplier = shiftDown ? 2 : 1\n                break;\n        }\n        if (multiplier != 0) {\n\n            emmet.top += multiplier * pixelsPerMillisecond * duration\n            emmet.top = Math.max(0, emmet.top)\n            emmet.top = Math.min(mainWindow.clientHeight - emmetElement.clientHeight, emmet.top)\n            if (emmetElement) {\n                emmetElement.style.top = emmet.top + \"px\"\n\n            }\n        }\n        lastKeyDown = ts\n\n    }\n    for (const [idx, stud] of studs.entries()) {\n        const { left, element, last_animate } = stud\n        const duration = ts - last_animate\n        const windowSize = mainWindow.clientWidth\n        const pixelsPerMillisecond = windowSize / (studSpeedS * 1000)\n        const pixels = pixelsPerMillisecond * duration\n        stud.left = left + pixels\n        element.style.left = Math.floor(stud.left) + \"px\";\n        //check for collision with emmet\n        const emmetRect = emmetElement.getBoundingClientRect()\n        const studRect = element.getBoundingClientRect()\n        const emmetBallsRect = emmetNutsElement.getBoundingClientRect()\n        if (emmetBallsRect.top < studRect.top && emmetBallsRect.bottom > studRect.bottom && studRect.right >= emmetBallsRect.left) {\n            score += 5000\n            setScore()\n            studs.splice(idx, 1)\n            element.parentElement?.removeChild(element);\n            playAha()\n\n        }\n        else if (emmetRect.top < studRect.top && emmetRect.bottom > studRect.bottom && studRect.right >= emmetRect.left + (emmetRect.right - emmetRect.left) / 2) {\n            //emmet hit the stud\n            score += 1000\n            setScore()\n            studs.splice(idx, 1)\n            element.parentElement?.removeChild(element);\n\n        }\n        else if (stud.left > windowSize - element.clientWidth) {\n            //emmet missed the stud.\n            studs.splice(idx, 1)\n            element.parentElement?.removeChild(element);\n        } else {\n            stud.last_animate = ts\n        }\n    }\n    requestAnimationFrame(animateframe);\n}\n\nconst newStud = () => {\n    const stud = document.createElement(\"div\");\n    stud.classList.add(\"stud\");\n    stud.style.left = \"0px\";\n    const minStudTop = 64\n    const mainWindow = getMainWindow()\n    const maxStudTop = mainWindow.clientHeight - minStudTop - 16 //16 is the height of a stud\n    const studTop = Math.floor(Math.random() * (maxStudTop - minStudTop) + minStudTop)\n    stud.style.top = studTop + \"px\"\n    mainWindow.appendChild(stud);\n    studs.push({ left: 0, element: stud, last_animate: performance.now() });\n}\ndocument.onreadystatechange = state => {\n    if (document.readyState === \"complete\") {\n        level = 1;\n        score = 0;\n        lives = 5;\n        setScore()\n        newStud();\n        studFactory()\n        requestAnimationFrame(animateframe);\n    }\n}\ndocument.addEventListener(\"keydown\", evt => {\n    keyDown = evt.key.toLowerCase()\n    shiftDown = evt.shiftKey\n    lastKeyDown = evt.timeStamp\n})\ndocument.addEventListener(\"keyup\", () => {\n    keyDown = shiftDown = undefined\n})\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjFA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}